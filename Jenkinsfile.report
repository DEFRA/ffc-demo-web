def getRepoURL() {
  return sh(returnStdout: true, script: "git config --get remote.origin.url").trim()
}

def getCommitSha() {

  return sh(returnStdout: true, script: "git rev-parse HEAD").trim()
}

def updateGithubCommitStatus(message, state) {
  repoUrl = getRepoURL()
  commitSha = getCommitSha()
  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ])
}

node {
  checkout scm
  try {
    stage('Report pending status') {
      updateGithubCommitStatus('Build started','PENDING')
    }
    stage('Report success') {
      updateGithubCommitStatus('Complete','SUCCESS')
    }
  } catch(e) {
    updateGithubCommitStatus(e.message,'FAILURE')
    throw e
  }
}
