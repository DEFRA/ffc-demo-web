#!/usr/bin/env sh

set -e
projectRoot="$(a="/$0"; a=${a%/*}; a=${a:-.}; a=${a#/}/; cd "$a/.." || return; pwd)"

# Set Docker/Kubernetes resource names managed by this script
dockerPrefix="ffc-demo-web"

show_help() {
  echo "
Stop and remove service containers.

Usage: scripts/stop [OPTION...] [-- [DOCKER_OPTION...]]

Options:
  -c, --clean    remove built images and volumes
  -h, --help     display this help text
  -i, --images   remove built images
  -l, --link     use this option when services were started with the '--link' flag
                 (uses the docker-compose.link.yaml override configuration)
  -v, --volumes  remove volumes

Docker options:
  Any arguments after '--' are passed through to 'docker-compose down'.
"
}

while :; do
  case $1 in
    -c|--clean)
      removeImages="true"
      removeVolumes="true"
      ;;

    -h|--help)
      show_help
      exit 0
      ;;

    -i|--images)
      removeImages="true"
      ;;

    -l|--link)
      link="true"
      ;;

    -v|--volumes)
      removeVolumes="true"
      ;;

    --)
      shift
      break
      ;;

    -?*)
      echo "Unrecognised argument: $1"
      show_help
      exit 1
      ;;

    *)
      break
  esac

  shift
done

compose() {
  if [ "${link}" = "true" ]; then
    docker-compose \
      -f docker-compose.yaml \
      -f docker-compose.link.yaml \
      $@
  else
    docker-compose $@
  fi
}

(
  cd "${projectRoot}"

  existingContainers="$( docker-compose ps -q )"
  existingVolumes="$( docker volume ls --filter name=^${dockerPrefix} --format={{.Name}} )"

  # Only bring down services if there are existing containers/volumes
  if [ -n "${existingContainers}${existingVolumes}" ]; then
    if [ "${removeImages}" = "true" ] || [ "${removeVolumes}" = "true" ]; then
      # Ensure all services exist so docker-compose knows which images to remove
      compose up --no-recreate --no-start

      # Remove services, images and volumes
      compose down \
        --remove-orphans \
        $( [ "${removeImages}" = "true" ] && echo "--rmi=local" || echo "" ) \
        $( [ "${removeVolumes}" = "true" ] && echo "--volumes" || echo "" ) \
        $@
    else
      # Remove services, leaving images and volumes intact
      compose down $@
    fi
  else
    echo "Services already stopped."
  fi

  if [ "${removeImages}" = "true" ]; then
    printf "\nPruning Docker images (this may take a while).\n"
    docker image prune -f
  fi
)

# Remove ffc-demo network if it is no longer in use
if [ -n "$(docker network ls --filter name=^ffc-demo$ --format={{.Name}})" ] \
  && [ "$(docker network inspect -f {{.Containers}} ffc-demo &>/dev/null)" = "map[]" ] \
; then
  echo "Removing ffc-demo network."
  docker network rm ffc-demo
fi
