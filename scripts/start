#!/usr/bin/env sh

set -e
projectRoot="$(a="/$0"; a=${a%/*}; a=${a:-.}; a=${a#/}/; cd "$a/.." || return; pwd)"

# Set Docker/Kubernetes resource names managed by this script
dockerPrefix="ffc-demo-web"

# show_help: function to show help text
show_help() {
  echo "
Build and start service containers.

Usage: scripts/start [OPTION...] [-- [DOCKER_OPTION...]]

Options:
  -b, --build    rebuild images (partially overrides --keep)
  -c, --clean    rebuild images and replace existing containers and volumes
                 (incompatible with --keep)
  -h, --help     display this help text
  -k, --keep     keep existing containers, images and volumes (incompatible with
                 --clean)
  -l, --link     connect services to an external 'ffc-demo' Docker network
                 (uses the docker-compose.link.yaml override configuration)
  -v, --volumes  replace existing volumes (partially overrides --keep)

Docker options:
  Any arguments after '--' are passed through to 'docker-compose up'.
"
}

# Parse arguments/flags
while :; do
  case $1 in
    -b|--build)
      build="true"
      ;;

    -c|--clean)
      build="true"
      clean="true"
      replaceVolumes="true"
      ;;

    -h|--help)
      show_help
      exit 0
      ;;

    -k|--keep)
      keep="true"
      ;;

    -l|--link)
      link="true"
      ;;

    -v|--volumes)
      replaceVolumes="true"
      ;;

    --)
      shift
      break
      ;;

    -?*)
      echo "Unrecognised argument: $1"
      show_help
      exit 1
      ;;

    *)
      break
  esac

  shift
done

# Validate arguments/flags
if [ "${clean}" = "true" ] && [ "${keep}" = "true" ]; then
  echo "Invalid arguments provided. The '--clean' and '--keep' flags cannot be used together."
  show_help
  exit 1
fi

# compose: function to run docker-compose commands with appropriate config files
compose() {
  if [ "${link}" = "true" ]; then
    docker-compose \
      -f docker-compose.yaml \
      -f docker-compose.link.yaml \
      $@
  else
    docker-compose $@
  fi
}

# show_conflicting_volume_warning: function to warn about existing volumes
show_conflicting_volume_warning() {
  volumes="$1"

  echo "
Detected conflicting volumes:

${volumes}

These are probably from previously running this service.
To proceed, rerun this script with any of the following flags:

  -c, --clean    replace existing volumes and rebuild images
  -k, --keep     keep existing volumes and images
  -v, --volumes  replace existing volumes
"
}

(
  # Run script body from project root folder
  cd "${projectRoot}"

  # Clean up old resources, if requested
  if [ "${clean}" = "true" ]; then
    scripts/stop --clean
  elif [ "${replaceVolumes}" = "true" ]; then
    scripts/stop --volumes
  elif [ "${keep}" != "true" ]; then
    # No instruction given to handle existing volumes - warn if any exist
    existingVolumes="$( docker volume ls --filter name=^${dockerPrefix} --format={{.Name}} )"
    if [ -n "${existingVolumes}" ]; then
      show_conflicting_volume_warning "${existingVolumes}"
      exit 1
    fi
  fi

  # Rebuild images, if requested
  if [ "${build}" = "true" ]; then
    compose build
  fi

  # Ensure ffc-demo network exists
  if [ "${link}" = "true" ] && [ -z "$(docker network ls --filter name=^ffc-demo$ --format={{.Name}})" ]; then
    echo "Creating ffc-demo network."
    docker network create ffc-demo
  fi

  # Start the service
  if [ "${keep}" ]; then
    compose up $@
  else
    compose up --force-recreate $@
  fi
)
